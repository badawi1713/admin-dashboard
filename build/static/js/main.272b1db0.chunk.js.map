{"version":3,"sources":["polyfill.js","App.js","serviceWorker.js","index.js","views/Utils/withPageView.js"],"names":["window","CustomEvent","event","params","bubbles","cancelable","detail","undefined","evt","document","createEvent","initCustomEvent","prototype","Event","override","css","DefaultLayout","React","lazy","Login","Page404","Unauthorized","App","Suspense","fallback","style","margin","className","size","color","exact","path","name","render","props","component","withPageView","to","Component","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ReactGA","initialize","WrappedComponent","options","trackPageView","page","set","pageview","state","this","pathname","search","prevProps","currentPage","nextPage"],"mappings":"+nEA+BA,WAEE,GAAmC,oBAAvBA,OAAOC,YAA6B,OAAO,EAEvD,SAASA,EAAcC,EAAOC,GAC5BA,EAASA,GAAU,CAAEC,SAAS,EAAOC,YAAY,EAAOC,YAAQC,GAChE,IAAIC,EAAMC,SAASC,YAAa,eAEhC,OADAF,EAAIG,gBAAiBT,EAAOC,EAAOC,QAASD,EAAOE,WAAYF,EAAOG,QAC/DE,EAGTP,EAAYW,UAAYZ,OAAOa,MAAMD,UAErCZ,OAAOC,YAAcA,EAbvB,G,4RChBA,IAAMa,EAAWC,cAAH,KAgBRC,EAAgBC,IAAMC,MAAK,kBAAM,wDAGjCC,EAAQF,IAAMC,MAAK,kBAAM,wDACzBE,EAAUH,IAAMC,MAAK,kBAAM,iCAE3BG,EAAeJ,IAAMC,MAAK,kBAC9B,iCA0CaI,E,uKArCX,OACE,kBAAC,gBAAD,KACE,kBAAC,IAAMC,SAAP,CAAgBC,SAvBtB,yBACEC,MAAO,CAAEC,OAAQ,SACjBC,UAAU,oCAEV,kBAAC,IAAD,CAAYZ,IAAKD,EAAUc,KAAM,GAAIC,MAAO,YAJ9C,sBAwBQ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,eACLC,KAAK,QACLC,OAAQ,SAACC,GAAD,OAAW,kBAACf,EAAUe,IAC9BC,UAAWC,YAAajB,KAE1B,kBAAC,IAAD,CACEY,KAAK,aACLC,KAAK,WACLC,OAAQ,SAACC,GAAD,OAAW,kBAACd,EAAYc,IAChCC,UAAWC,YAAahB,KAE1B,kBAAC,IAAD,CACEW,KAAK,sBACLC,KAAK,eACLC,OAAQ,SAACC,GAAD,OAAW,kBAACb,EAAiBa,IACrCC,UAAWC,YAAaf,KAE1B,kBAAC,IAAD,CACEU,KAAK,UACLC,KAAK,UACLC,OAAQ,SAACC,GAAD,OAAW,kBAAClB,EAAkBkB,IACtCC,UAAWC,YAAapB,KAE1B,kBAAC,IAAD,CAAUqB,GAAG,sB,GA/BPC,aC/BEC,QACW,cAA7BvC,OAAOwC,SAASC,UAEe,UAA7BzC,OAAOwC,SAASC,UAEhBzC,OAAOwC,SAASC,SAASC,MACvB,2DCNNC,IAASV,OAAO,kBAAC,EAAD,MAASxB,SAASmC,eAAe,SD+G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,sGEzHnBC,IAAQC,WAAW,kBA+CJhB,IA7CM,SAACiB,GAAoC,IAAlBC,EAAiB,uDAAP,GAC1CC,EAAgB,SAACC,GACrBL,IAAQM,IAAR,aACED,QACGF,IAELH,IAAQO,SAASF,IAGnB,mNACEG,MAAQ,CACNH,KAAM,MAFV,kEAgBI,IAAMA,EAAOI,KAAK1B,MAAMM,SAASqB,SAAWD,KAAK1B,MAAMM,SAASsB,OAChEP,EAAcC,KAjBlB,yCAoBqBO,GACjB,IAAMC,EACJD,EAAUvB,SAASqB,SAAWE,EAAUvB,SAASsB,OAC7CG,EAAWL,KAAKD,MAAMH,KAExBQ,IAAgBC,GAClBV,EAAcU,KA1BpB,+BA+BI,OAAO,kBAACZ,EAAqBO,KAAK1B,UA/BtC,iDAKmCA,EAAOyB,GACtC,IAAMH,EAAOtB,EAAMM,SAASqB,SAAW3B,EAAMM,SAASsB,OACtD,OAAIN,IAASG,EAAMH,KACV,CACLA,QAGG,SAZX,GAAqBvC,IAAMqB,c","file":"static/js/main.272b1db0.chunk.js","sourcesContent":["/*\n* required polyfills\n*/\nimport \"core-js\";\nimport 'core-js/features/set/map';\n\n/** IE9, IE10 and IE11 requires all of the following polyfills. **/\n// import 'core-js/es/symbol'\n// import 'core-js/es/object'\n// import 'core-js/es/function'\n// import 'core-js/es/parse-int'\n// import 'core-js/es/parse-float'\n// import 'core-js/es/number'\n// import 'core-js/es/math'\n// import 'core-js/es/string'\n// import 'core-js/es/date'\n// import 'core-js/es/array'\n// import 'core-js/es/regexp'\n// import 'core-js/es/map'\n// import 'core-js/es/weak-map'\n// import 'core-js/es/set'\n// import 'core-js/es/object'\n\n/** IE10 and IE11 requires the following for the Reflect API. */\n// import 'core-js/es/reflect'\n\n/** Evergreen browsers require these. **/\n// Used for reflect-metadata in JIT. If you use AOT (and only Angular decorators), you can remove.\n// import 'core-js/es/reflect'\n\n// CustomEvent() constructor functionality in IE9, IE10, IE11\n(function () {\n\n  if ( typeof window.CustomEvent === \"function\" ) return false\n\n  function CustomEvent ( event, params ) {\n    params = params || { bubbles: false, cancelable: false, detail: undefined }\n    var evt = document.createEvent( 'CustomEvent' )\n    evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail )\n    return evt\n  }\n\n  CustomEvent.prototype = window.Event.prototype\n\n  window.CustomEvent = CustomEvent\n})()\n","import React, { Component } from \"react\";\nimport {\n  Route,\n  Switch,\n  BrowserRouter as Router,\n  Redirect,\n} from \"react-router-dom\";\nimport { css } from \"@emotion/core\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\n// import { renderRoutes } from 'react-router-config';\nimport \"./App.scss\";\n\n// Google Analytics HOC Technique\nimport withPageView from \"./views/Utils/withPageView\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: #20a8d8;\n`;\n\nconst loading = () => (\n  <div\n    style={{ margin: 0 + \"auto\" }}\n    className=\"animated fadeIn pt-3 text-center\"\n  >\n    <ClipLoader css={override} size={20} color={\"#20A8D8\"} /> Sedang Memuat...\n  </div>\n);\n\n// Containers\nconst DefaultLayout = React.lazy(() => import(\"./containers/DefaultLayout\"));\n\n// Pages\nconst Login = React.lazy(() => import(\"./views/Pages/Login\"));\nconst Page404 = React.lazy(() => import(\"./views/Pages/Page404\"));\n// const Page500 = React.lazy(() => import(\"./views/Pages/Page500\"));\nconst Unauthorized = React.lazy(() =>\n  import(\"./views/Pages/Unauthorized/Unauthorized\")\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <React.Suspense fallback={loading()}>\n          <Switch>\n            <Route\n              exact\n              path=\"/admin/login\"\n              name=\"login\"\n              render={(props) => <Login {...props} />}\n              component={withPageView(Login)}\n            />\n            <Route\n              path=\"/admin/404\"\n              name=\"Page 404\"\n              render={(props) => <Page404 {...props} />}\n              component={withPageView(Page404)}\n            />\n            <Route\n              path=\"/admin/unauthorized\"\n              name=\"Unauthorized\"\n              render={(props) => <Unauthorized {...props} />}\n              component={withPageView(Unauthorized)}\n            />\n            <Route\n              path=\"/admin/\"\n              name=\"Beranda\"\n              render={(props) => <DefaultLayout {...props} />}\n              component={withPageView(DefaultLayout)}\n            />\n            <Redirect to=\"/admin/404\" />\n          </Switch>\n        </React.Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie9'; // For IE 9-11 support\nimport 'react-app-polyfill/stable';\n// import 'react-app-polyfill/ie11'; // For IE 11 support\nimport './polyfill'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\r\nimport ReactGA from \"react-ga\";\r\nReactGA.initialize(\"UA-169246778-1\");\r\n\r\nconst withPageView = (WrappedComponent, options = {}) => {\r\n  const trackPageView = (page) => {\r\n    ReactGA.set({\r\n      page,\r\n      ...options,\r\n    });\r\n    ReactGA.pageview(page);\r\n  };\r\n\r\n  return class extends React.Component {\r\n    state = {\r\n      page: null,\r\n    };\r\n\r\n    static getDerivedStatedFromProps(props, state) {\r\n      const page = props.location.pathname + props.location.search;\r\n      if (page !== state.page) {\r\n        return {\r\n          page,\r\n        };\r\n      }\r\n      return null;\r\n    }\r\n\r\n    componentDidMount() {\r\n      const page = this.props.location.pathname + this.props.location.search;\r\n      trackPageView(page);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      const currentPage =\r\n        prevProps.location.pathname + prevProps.location.search;\r\n      const nextPage = this.state.page;\r\n\r\n      if (currentPage !== nextPage) {\r\n        trackPageView(nextPage);\r\n      }\r\n    }\r\n\r\n    render() {\r\n      return <WrappedComponent {...this.props} />;\r\n    }\r\n  };\r\n};\r\n\r\nexport default withPageView;\r\n"],"sourceRoot":""}